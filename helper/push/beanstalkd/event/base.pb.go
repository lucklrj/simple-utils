// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base.proto

package event

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	BusinessID           string   `protobuf:"bytes,3,opt,name=BusinessID,proto3" json:"BusinessID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReq) Reset()         { *m = EventReq{} }
func (m *EventReq) String() string { return proto.CompactTextString(m) }
func (*EventReq) ProtoMessage()    {}
func (*EventReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{0}
}

func (m *EventReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReq.Unmarshal(m, b)
}
func (m *EventReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReq.Marshal(b, m, deterministic)
}
func (m *EventReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReq.Merge(m, src)
}
func (m *EventReq) XXX_Size() int {
	return xxx_messageInfo_EventReq.Size(m)
}
func (m *EventReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReq.DiscardUnknown(m)
}

var xxx_messageInfo_EventReq proto.InternalMessageInfo

func (m *EventReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventReq) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EventReq) GetBusinessID() string {
	if m != nil {
		return m.BusinessID
	}
	return ""
}

type EventRes struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventRes) Reset()         { *m = EventRes{} }
func (m *EventRes) String() string { return proto.CompactTextString(m) }
func (*EventRes) ProtoMessage()    {}
func (*EventRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{1}
}

func (m *EventRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRes.Unmarshal(m, b)
}
func (m *EventRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRes.Marshal(b, m, deterministic)
}
func (m *EventRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRes.Merge(m, src)
}
func (m *EventRes) XXX_Size() int {
	return xxx_messageInfo_EventRes.Size(m)
}
func (m *EventRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRes.DiscardUnknown(m)
}

var xxx_messageInfo_EventRes proto.InternalMessageInfo

func (m *EventRes) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *EventRes) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*EventReq)(nil), "event.EventReq")
	proto.RegisterType((*EventRes)(nil), "event.EventRes")
}

func init() { proto.RegisterFile("base.proto", fileDescriptor_db1b6b0986796150) }

var fileDescriptor_db1b6b0986796150 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0x2c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2d, 0x4b, 0xcd, 0x2b, 0x51, 0x0a, 0xe2,
	0xe2, 0x70, 0x05, 0x31, 0x82, 0x52, 0x0b, 0x85, 0x84, 0xb8, 0x58, 0xfc, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0x98, 0x53, 0x7e, 0x4a, 0xa5, 0x04, 0x13,
	0x44, 0x0c, 0xc4, 0x16, 0x92, 0xe3, 0xe2, 0x72, 0x2a, 0x2d, 0xce, 0xcc, 0x4b, 0x2d, 0x2e, 0xf6,
	0x74, 0x91, 0x60, 0x06, 0xcb, 0x20, 0x89, 0x28, 0x99, 0xc1, 0xcd, 0x2c, 0x16, 0x12, 0xe3, 0x62,
	0x2b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x01, 0x9b, 0xca, 0x11, 0x04, 0xe5, 0x81, 0xcc, 0x4d, 0x49,
	0x2d, 0x4e, 0x86, 0x99, 0x0b, 0x62, 0x1b, 0x19, 0x72, 0xb1, 0x82, 0xf5, 0x09, 0x69, 0x70, 0xb1,
	0x04, 0x94, 0x16, 0x67, 0x08, 0xf1, 0xeb, 0x81, 0x1d, 0xa9, 0x07, 0x73, 0xa1, 0x14, 0x9a, 0x40,
	0x71, 0x12, 0x1b, 0xd8, 0x33, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x0a, 0x81, 0xa8,
	0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	Push(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventRes, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Push(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventRes, error) {
	out := new(EventRes)
	err := c.cc.Invoke(ctx, "/event.Event/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	Push(context.Context, *EventReq) (*EventRes, error)
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Push(ctx, req.(*EventReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Event_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}
